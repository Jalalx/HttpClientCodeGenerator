using Xunit;
using Xunit.Abstractions;

namespace HttpClientCodeGeneratorTests
{
    public class AdHocTests : Internals.TestBase
    {
        private readonly ITestOutputHelper _output;

        public AdHocTests(ITestOutputHelper output)
        {
            _output = output;
        }

        [Fact]
        public void MethodProvidedHttpClient()
        {
            string source = @"
using System;
using System.Threading.Tasks;
using System.Net.Http;
using HttpClientGenerator;
using HttpClientGenerator.Shared;

namespace ConsoleClientApp
{
    public partial class MyHttpClient
    {
        public HttpClient GetHttpClient() { return null; }

        [HttpGet(""/api/v1/user/{id}"")]
        public partial Task<User> GetUserAsync(int id);
    }
}
namespace ConsoleClientApp.Models
{
    public class User {}
}
";

            string output = GetGeneratedOutput(source);

        }


        [Fact]
        public void FieldProvidedHttpClient()
        {
            string source = @"
using System;
using System.Threading.Tasks;
using System.Net.Http;
using HttpClientGenerator;
using HttpClientGenerator.Shared;

namespace ConsoleClientApp
{
    public partial class MyHttpClient
    {
        private readonly HttpClient _httpClient;

        public HttpClientDependentService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        [HttpGet(""/api/v1/user/{id}"")]
        public partial Task<User> GetUserAsync(int id);
    }
}
namespace ConsoleClientApp.Models
{
    public class User {}
}
";

            string output = GetGeneratedOutput(source);

        }

        [Fact]
        public void NoHttpClientFieldProvidedHttpClient()
        {
            string source = @"
using HttpClientCodeGeneratorIntegrationTests.Models;
using System.Threading.Tasks;
using HttpClientGenerator.Shared;
using System.Collections.Generic;

namespace HttpClientCodeGeneratorIntegrationTests.Basics
{
    public partial class MyHttpService
    {
        [HttpGet(""user/{id}"")]
        public partial Task<User> GetUserAsync(long id);

        [HttpGet(""user/wrapped/{id}"")]
        public partial Task<HttpResult<User>> GetWrappedUserAsync(long id);

        [HttpGet(""user/search"")]
        public partial Task<IEnumerable<User>> SearchUserByNameAsync(string name);

        [HttpPost(""user"")]
        public partial Task<User> CreateUser(User user);

        [HttpPut(""user/{id}"")]
        public partial Task<User> UpdateUserAsync(int id, User user);

        [HttpDelete(""user/{id}"")]
        public partial Task RemoveUserAsync(int id);
    }
}
namespace ConsoleClientApp.Models
{
    public class User {}
}
";

            string output = GetGeneratedOutput(source);

        }

        [Fact]
        public void MethodWithHttpRequestHeaderAttributes()
        {
            string source = @"
using System;
using System.Threading.Tasks;
using System.Net.Http;
using HttpClientGenerator;
using HttpClientGenerator.Shared;

namespace ConsoleClientApp
{
    public partial class MyHttpClient
    {
        [HttpRequestHeader(""x-foo-1"", ""bar-value1"")]
        [HttpRequestHeader(""x-foo-2"", ""bar-value2.0, bar-value2.1"")]
        [HttpGet(""/api/v1/user/{id}"")]
        public partial Task<User> GetUserAsync(int id);
    }
}
namespace ConsoleClientApp.Models
{
    public class User {}
}
";

            string expectedOutput = @"
// <auto-generated>
//     This code was generated by HttpClientCodeGenerator.
// </auto-generated>

using System;
using System.Net.Http;
using System.Threading.Tasks;
using System.Collections.Generic;
using ConsoleClientApp;
using ConsoleClientApp.Models;
using HttpClientGenerator.Shared;


namespace ConsoleClientApp
{
    public partial class MyHttpClient
    {
        protected readonly HttpClient _httpClient;
        
        public MyHttpClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }
        
        public partial async Task<User> GetUserAsync(int id)
        {
            const string @___httpMethod = ""GET"";
            
            var @___path = ""/api/v1/user/{id}"";
            var @___routes = new Dictionary<string, object>();
            @___routes[""id""] = id;
            
            var @___queryParams = new Dictionary<string, object>();
            // Query String dictionary goes here...
            
            var @___headers = new Dictionary<string, string>();
            @___headers[""x-foo-1""] = ""bar-value1"";
            @___headers[""x-foo-2""] = ""bar-value2.0, bar-value2.1"";
            
            return await HttpClientGenerator.Shared.HttpClientHelper.SendAsync<User>(_httpClient, @___httpMethod, @___path, @___headers, @___routes, @___queryParams);
        }
        
    }
}
";

            string output = GetGeneratedOutput(source);

            Assert.Equal(expectedOutput, output);
        }
    }
}
