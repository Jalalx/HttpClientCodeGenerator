using Xunit;
using Xunit.Abstractions;

namespace HttpClientCodeGeneratorTests
{
    public class HttpClientCodeGeneratorTests : Internals.TestBase
    {
        private readonly ITestOutputHelper _output;

        public HttpClientCodeGeneratorTests(ITestOutputHelper output)
        {
            _output = output;
        }

        [Fact]
        public void HttpGet_WithHttpGetAsyncTaskGenericReturnType_GeneratesExpectedOutput()
        {
            string source = @"
using System;
using System.Threading.Tasks;
using HttpClientGenerator;
using HttpClientGenerator.Shared;

namespace ConsoleClientApp
{
    public partial class MyHttpClient
    {
        [HttpGet(""/api/v1/user/{id}"")]
        public partial Task<User> GetUserAsync(int id);
    }
}
namespace ConsoleClientApp.Models
{
    public class User {}
}
";
            string expectedOutput = @"
// <auto-generated>
//     This code was generated by HttpClientCodeGenerator.
// </auto-generated>

using System;
using System.Net.Http;
using System.Threading.Tasks;
using System.Collections.Generic;
using ConsoleClientApp;
using ConsoleClientApp.Models;
using HttpClientGenerator.Shared;


namespace ConsoleClientApp
{
    public partial class MyHttpClient
    {
        protected readonly HttpClient _httpClient;
        
        public MyHttpClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }
        
        public partial async System.Threading.Tasks.Task<User> GetUserAsync(int id)
        {
            const string @___httpMethod = ""GET"";
            
            var @___path = ""/api/v1/user/{id}"";
            var @___routes = new Dictionary<string, object>();
            @___routes[""id""] = id;
            
            var @___queryParams = new Dictionary<string, object>();
            // Query String dictionary goes here...
            
            var @___headers = new Dictionary<string, string>();
            // Header dictionary goes here...
            
            return await HttpClientGenerator.Shared.HttpClientHelper.SendAsync<User>(_httpClient, @___httpMethod, @___path, @___headers, @___routes, @___queryParams);
        }
        
    }
}
";
            string output = GetGeneratedOutput(source);

            Assert.NotNull(output);

            Assert.Equal(expectedOutput, output);
        }

        [Fact]
        public void HttpGet_WithHttpGetAsyncTaskGenericParameterReturnType_GeneratesExpectedOutput()
        {
            string source = @"
using System;
using System.Threading.Tasks;
using HttpClientGenerator.Shared;

namespace ConsoleClientApp
{
    public partial class MyHttpClient
    {
        [HttpGet(""/api/v1/user/{id}"")]
        public partial Task<ResultDto<User>> GetUserAsync(int id);
    }
}
namespace ConsoleClientApp.Models
{
    public class User {}
    public class ResultDto<T> { public T Result { get; set; } }
}
";
            string expectedOutput = @"
// <auto-generated>
//     This code was generated by HttpClientCodeGenerator.
// </auto-generated>

using System;
using System.Net.Http;
using System.Threading.Tasks;
using System.Collections.Generic;
using ConsoleClientApp;
using ConsoleClientApp.Models;
using HttpClientGenerator.Shared;


namespace ConsoleClientApp
{
    public partial class MyHttpClient
    {
        protected readonly HttpClient _httpClient;
        
        public MyHttpClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }
        
        public partial async System.Threading.Tasks.Task<ResultDto<User>> GetUserAsync(int id)
        {
            const string @___httpMethod = ""GET"";
            
            var @___path = ""/api/v1/user/{id}"";
            var @___routes = new Dictionary<string, object>();
            @___routes[""id""] = id;
            
            var @___queryParams = new Dictionary<string, object>();
            // Query String dictionary goes here...
            
            var @___headers = new Dictionary<string, string>();
            // Header dictionary goes here...
            
            return await HttpClientGenerator.Shared.HttpClientHelper.SendAsync<ResultDto<User>>(_httpClient, @___httpMethod, @___path, @___headers, @___routes, @___queryParams);
        }
        
    }
}
";
            string output = GetGeneratedOutput(source);

            Assert.NotNull(output);

            Assert.Equal(expectedOutput, output);
        }

        [Fact]
        public void HttpGet_WithHttpGetAsyncTaskGenericReturnTypeUsingQueryStringName_GeneratesExpectedOutput()
        {
            string source = @"
using System;
using System.Threading.Tasks;
using HttpClientGenerator;
using HttpClientGenerator.Shared;

namespace ConsoleClientApp
{
    public partial class MyHttpClient
    {
        [HttpGet(""/api/v1/user/search"")]
        public partial Task<User> SearchUserByNameAsync(string name);
    }
}
namespace ConsoleClientApp.Models
{
    public class User {}
}
";
            string expectedOutput = @"
// <auto-generated>
//     This code was generated by HttpClientCodeGenerator.
// </auto-generated>

using System;
using System.Net.Http;
using System.Threading.Tasks;
using System.Collections.Generic;
using ConsoleClientApp;
using ConsoleClientApp.Models;
using HttpClientGenerator.Shared;


namespace ConsoleClientApp
{
    public partial class MyHttpClient
    {
        protected readonly HttpClient _httpClient;
        
        public MyHttpClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }
        
        public partial async System.Threading.Tasks.Task<User> SearchUserByNameAsync(string name)
        {
            const string @___httpMethod = ""GET"";
            
            var @___path = ""/api/v1/user/search"";
            var @___routes = new Dictionary<string, object>();
            
            var @___queryParams = new Dictionary<string, object>();
            @___queryParams[""name""] = name;
            
            var @___headers = new Dictionary<string, string>();
            // Header dictionary goes here...
            
            return await HttpClientGenerator.Shared.HttpClientHelper.SendAsync<User>(_httpClient, @___httpMethod, @___path, @___headers, @___routes, @___queryParams);
        }
        
    }
}
";
            string output = GetGeneratedOutput(source);

            Assert.NotNull(output);

            Assert.Equal(expectedOutput, output);
        }

        [Fact]
        public void HttpPost_AsyncTaskReturnType_GeneratesExpectedOutput()
        {
            string source = @"
using System;
using System.Threading.Tasks;
using HttpClientGenerator.Shared;

namespace ConsoleClientApp
{
    public partial class MyHttpClient
    {
        [HttpGet(""/api/v1/user"")]
        public partial Task CreateUserAsync(ConsoleClientApp.Models.User user);
    }
}
namespace ConsoleClientApp.Models
{
    public class User {}
}
";
            string expectedOutput = @"
// <auto-generated>
//     This code was generated by HttpClientCodeGenerator.
// </auto-generated>

using System;
using System.Net.Http;
using System.Threading.Tasks;
using System.Collections.Generic;
using ConsoleClientApp;
using ConsoleClientApp.Models;
using HttpClientGenerator.Shared;


namespace ConsoleClientApp
{
    public partial class MyHttpClient
    {
        protected readonly HttpClient _httpClient;
        
        public MyHttpClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }
        
        public partial async System.Threading.Tasks.Task CreateUserAsync(ConsoleClientApp.Models.User user)
        {
            const string @___httpMethod = ""GET"";
            
            var @___path = ""/api/v1/user"";
            var @___routes = new Dictionary<string, object>();
            
            var @___queryParams = new Dictionary<string, object>();
            // Query String dictionary goes here...
            
            var @___headers = new Dictionary<string, string>();
            // Header dictionary goes here...
            
            return await HttpClientGenerator.Shared.HttpClientHelper.SendDataAsync<ConsoleClientApp.Models.User>(_httpClient, @___httpMethod, @___path, @___headers, @___routes, @___queryParams, user);
        }
        
    }
}
";
            string output = GetGeneratedOutput(source);

            Assert.NotNull(output);

            Assert.Equal(expectedOutput, output);
        }


        [Fact]
        public void HttpPost_AsyncTaskReturnTypeWithoutNamespace_GeneratesExpectedOutput()
        {
            string source = @"
using System;
using System.Threading.Tasks;
using HttpClientGenerator.Shared;
using ConsoleClientApp.Models;

namespace ConsoleClientApp
{
    public partial class MyHttpClient
    {
        [HttpGet(""/api/v1/user"")]
        public partial Task CreateUserAsync(User user);
    }
}
namespace ConsoleClientApp.Models
{
    public class User {}
}
";
            string expectedOutput = @"
// <auto-generated>
//     This code was generated by HttpClientCodeGenerator.
// </auto-generated>

using System;
using System.Net.Http;
using System.Threading.Tasks;
using System.Collections.Generic;
using ConsoleClientApp;
using ConsoleClientApp.Models;
using HttpClientGenerator.Shared;


namespace ConsoleClientApp
{
    public partial class MyHttpClient
    {
        protected readonly HttpClient _httpClient;
        
        public MyHttpClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }
        
        public partial async System.Threading.Tasks.Task CreateUserAsync(ConsoleClientApp.Models.User user)
        {
            const string @___httpMethod = ""GET"";
            
            var @___path = ""/api/v1/user"";
            var @___routes = new Dictionary<string, object>();
            
            var @___queryParams = new Dictionary<string, object>();
            // Query String dictionary goes here...
            
            var @___headers = new Dictionary<string, string>();
            // Header dictionary goes here...
            
            return await HttpClientGenerator.Shared.HttpClientHelper.SendDataAsync<ConsoleClientApp.Models.User>(_httpClient, @___httpMethod, @___path, @___headers, @___routes, @___queryParams, user);
        }
        
    }
}
";
            string output = GetGeneratedOutput(source);

            Assert.NotNull(output);

            Assert.Equal(expectedOutput, output);
        }
    }
}
